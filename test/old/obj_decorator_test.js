// Generated by LiveScript 1.2.0
(function(){
  var ClientDecorator, UserClientDecorator, AccountDecorator;
  require('../test_setup');
  ClientDecorator = require('../../client_decorator');
  UserClientDecorator = (function(superclass){
    var prototype = extend$((import$(UserClientDecorator, superclass).displayName = 'UserClientDecorator', UserClientDecorator), superclass).prototype, constructor = UserClientDecorator;
    function UserClientDecorator(model, context){
      this.model = model;
      this.context = context;
      UserClientDecorator.superclass.apply(this, arguments);
    }
    prototype.serverBlueprint = function(user){
      return this.propertiesOnly();
    };
    prototype.clientBlueprint = function(user){
      var copy;
      copy = _.deepClone(user);
      copy['delete']('password');
      copy['delete']('encryptedpassword');
      return copy;
    };
    prototype.customizeFor = function(context){
      return this.blueprint;
    };
    return UserClientDecorator;
  }(ClientDecorator));
  AccountDecorator = (function(superclass){
    var prototype = extend$((import$(AccountDecorator, superclass).displayName = 'AccountDecorator', AccountDecorator), superclass).prototype, constructor = AccountDecorator;
    function AccountDecorator(model, context){
      this.model = model;
      this.context = context;
      AccountDecorator.superclass.apply(this, arguments);
    }
    prototype.type = 'client';
    prototype.blueprint = function(account){
      var copy;
      copy = _.deepClone(user);
      copy['delete']('password');
      copy['delete']('encryptedpassword');
      return copy;
    };
    prototype.customizeFor = function(context){
      return this.blueprint;
    };
    return AccountDecorator;
  }(ObjDecorator));
  describe('ObjDecorator', function(){
    var objDecorator;
    objDecorator = null;
    before(function(){
      return objDecorator = new ObjDecorator();
    });
    return specify('creates a objDecorator', function(){
      return objDecorator.should.be.an.instanceOf(ObjDecorator);
    });
  });
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
