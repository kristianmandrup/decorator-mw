// Generated by LiveScript 1.2.0
(function(){
  var rek, requires, assert, expect, Person, DecoratorMw, loadMwStack, ContextDecorators, person, decoratedPerson, app;
  rek = require('rekuire');
  requires = rek('requires');
  requires.test('test_setup');
  assert = require('chai').assert;
  expect = require('chai').expect;
  Person = requires.clazz('person');
  DecoratorMw = requires.file('decorator-mw');
  loadMwStack = new Middleware('model').use({
    decorate: DecoratorMw
  });
  ContextDecorators = require('decorator-mw').ContextDecorators;
  person = {
    name: 'Joe 6 Pack',
    age: 28,
    clazz: 'person'
  };
  decoratedPerson = loadMwStack.run(person);
  describe(DecoratorMw(function(){
    var mws;
    mws = {};
    describe('create', function(){
      context('no decorators defined', function(){
        return specify('error - missing decorator registry', function(){
          return expect(function(){
            return new DecoratorMw;
          }).to['throw'];
        });
      });
      return context('app.decorators defined', function(){
        before(function(){
          app = {
            decorators: new ContextDecorators
          };
          return app.decorators.set('person', Person);
        });
        return specify('no error', function(){
          return expect(function(){
            return new DecoratorMw;
          }).to.not['throw'];
        });
      });
    });
    describe('create-decorations', function(){
      before(function(){
        return app = {
          decorators: new ContextDecorators
        };
      });
      context('invalid decorations arg', function(){
        return specify('fails', function(){
          return new DecoratorMw.createDecorations([]);
        });
      });
      return context('valid decorations arg', function(){
        return specify('creates it', function(){
          return new DecoratorMw.createDecorations({});
        });
      });
    });
    return describe('run', function(){
      before(function(){
        app = {
          decorators: new ContextDecorators
        };
        return mws.dec = new DecoratorMw;
      });
      context('no context', function(){
        return specify('fails', function(){
          return expect(function(){
            return mws.dec.run();
          }).to['throw'];
        });
      });
      return context('empty context', function(){
        return specify('ok', function(){
          return expect(function(){
            return mws.dec.run();
          }).to.not['throw'];
        });
      });
    });
  }));
}).call(this);
