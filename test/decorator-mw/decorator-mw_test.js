// Generated by LiveScript 1.2.0
(function(){
  var requires, assert, expect, middleware, Middleware, DecoratorMw, CtxDecorations, Person, app;
  requires = require('../../requires');
  requires.test('test_setup');
  assert = require('chai').assert;
  expect = require('chai').expect;
  middleware = require('middleware');
  Middleware = middleware.Middleware;
  DecoratorMw = requires.mw('decorator_mw');
  CtxDecorations = requires.lib('context_decorations');
  Person = requires.clazz('person');
  describe('DecoratorMw', function(){
    var mws, persons, decorated;
    mws = {};
    persons = {};
    decorated = {};
    describe('create', function(){
      context('no decorators defined', function(){
        return specify('allow creationg withour registry', function(){
          return expect(function(){
            return new DecoratorMw;
          }).to.not['throw'];
        });
      });
      return context('app.decorators defined', function(){
        before(function(){
          app = {
            decorators: new CtxDecorations
          };
          return app.decorators.register('person', Person);
        });
        return specify('no error', function(){
          return expect(function(){
            return new DecoratorMw;
          }).to.not['throw'];
        });
      });
    });
    describe('create-decorations', function(){
      before(function(){
        return app = {
          decorators: new CtxDecorations
        };
      });
      context('invalid decorations arg', function(){
        return specify('fails', function(){
          return new DecoratorMw.createDecorations([]);
        });
      });
      return context('valid decorations arg', function(){
        return specify('creates it', function(){
          return new DecoratorMw.createDecorations({});
        });
      });
    });
    describe('run', function(){
      before(function(){
        app = {
          decorators: new CtxDecorations
        };
        return mws.dec = new DecoratorMw;
      });
      context('no context', function(){
        return specify('fails', function(){
          return expect(function(){
            return mws.dec.run();
          }).to['throw'];
        });
      });
      return context('empty context', function(){
        return specify('ok', function(){
          return expect(function(){
            return mws.dec.run();
          }).to.not['throw'];
        });
      });
    });
    return xdescribe('full mw-stack', function(){
      return before(function(){
        var loadMwStack;
        console.log('defining mw-stack');
        loadMwStack = new Middleware('model').use({
          decorate: DecoratorMw
        });
        persons.joe = {
          name: 'Joe 6 Pack',
          age: 28,
          clazz: 'person'
        };
        return decorated.person = loadMwStack.run(person);
      });
    });
  });
}).call(this);
