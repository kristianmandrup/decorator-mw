// Generated by LiveScript 1.2.0
(function(){
  var modelMw, ModelMw, requires, CtxDecorations, DecoratorMw;
  modelMw = require('model-mw');
  ModelMw = modelMw.mw;
  requires = require('../../requires');
  CtxDecorations = requires.lib('context_decorations');
  module.exports = DecoratorMw = (function(superclass){
    var prototype = extend$((import$(DecoratorMw, superclass).displayName = 'DecoratorMw', DecoratorMw), superclass).prototype, constructor = DecoratorMw;
    function DecoratorMw(context){
      this.context = context;
      DecoratorMw.superclass.apply(this, arguments);
      this.setDecorations(context);
    }
    prototype.setDecorations = function(context){
      var decs;
      decs = this.calcDecorations(context);
      if (typeof decs === 'object') {
        if (decs.constructor === CtxDecorations) {
          return this.decorations = decs;
        }
      }
    };
    prototype.calcDecorations = function(context){
      if (typeof context === 'object') {
        if (context.decorators == null) {
          if (typeof app == 'undefined' || app === null) {
            throw Error("app not defined");
          }
          return app.decorators;
        }
        return this.createDecorations(this.context.decorators);
      }
    };
    prototype.createDecorations = function(decorators){
      return new CtxDecorations(decorators);
    };
    prototype.run = function(ctx){
      superclass.prototype.run.apply(this, arguments);
      this.setDecorations(ctx);
      return this.decorations.ctx(this.context).decorate(this.data, this.model);
    };
    return DecoratorMw;
  }(ModelMw));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
