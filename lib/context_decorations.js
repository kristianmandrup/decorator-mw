// Generated by LiveScript 1.2.0
(function(){
  var Class, _, lo, requires, Decorations, Repo, CtxDecorations, ModelCtxFactory;
  Class = require('jsclass/src/core').Class;
  _ = require('prelude-ls');
  lo = require('lodash');
  require('sugar');
  requires = require('../requires');
  Decorations = requires.lib('decorations');
  Repo = requires.lib('repo');
  CtxDecorations = new Class(Repo, {
    initialize: function(decorations){
      return this.callSuper();
    },
    getRepo: function(ctxName){
      ctxName || (ctxName = 'default');
      return this.repository.get(ctxName);
    },
    ctx: function(name){
      return this.getOrInitRepo(name);
    },
    getOrInitRepo: function(ctxName){
      ctxName || (ctxName = 'default');
      return this.getRepo(ctxName) || this.initRepo(ctxName);
    },
    initRepo: function(ctxName){
      this.repository.store(ctxName, new Decorations);
      return this.repository.get(ctxName);
    },
    find: function(ctxName, model){
      var repo;
      if (model === void 8) {
        model = ctxName;
        ctxName = 'default';
      }
      repo = this.getRepo(ctxName);
      if (repo) {
        return repo.find(model);
      }
    },
    register: function(){
      var self, decoration, name, ctx, repo, modelName, klass;
      self = this;
      switch (arguments.length) {
      case 1:
        decoration = arguments[0];
        name = this.nameOf(decoration);
        return this.getOrInitRepo().register(name, decoration);
      case 2:
        decoration = arguments[1];
        ctx = arguments[0];
        repo = this.getOrInitRepo(ctx);
        switch (typeof decoration) {
        case 'array':
          return registerList(ctx, decoration);
        case 'object':
          if (decoration.name == null) {
            this.registerHash(ctx, decoration);
            return;
          }
          name = this.nameOf(decoration);
          return repo.register(name, decoration);
        }
        break;
      case 3:
        ctx = arguments[0];
        modelName = arguments[1];
        klass = arguments[2];
        repo = this.getOrInitRepo(ctx);
        return repo.register(modelName, klass);
      }
    },
    nameOf: function(decoration){
      if (!_.isType('Object', decoration)) {
        throw Error("Decorator must be an Object, was: " + decoration);
      }
      if (decoration.name == null) {
        throw Error("Decorator must have a name function, " + decoration);
      }
      return decoration.name();
    },
    registerHash: function(ctx, hash){
      var self;
      self = this;
      return _.keys(hash).each(function(key){
        return self.register(ctx, key, hash[key]);
      });
    },
    registerList: function(){
      var self, decorations, ctx;
      self = this;
      switch (arguments.length) {
      case 1:
        decorations = arguments.first;
        return decorations.each(function(dec){
          return self.register(dec);
        });
      case 2:
        ctx = arguments.first;
        decorations = arguments.last;
        switch (typeof decorations) {
        case 'array':
          return decorations.each(function(dec){
            return self.register(ctx, dec);
          });
        case 'object':
          return decorations.each(function(name, dec){
            return self.register(ctx, name, dec);
          });
        }
      }
    },
    forModel: function(modelName){
      return new ModelCtxFactory(this, modelName);
    }
  });
  ModelCtxFactory = new Class({
    initialize: function(ctxDecorations, model){
      this.ctxDecorations = ctxDecorations;
      this.model = model;
    },
    register: function(hash){
      var self;
      self = this;
      return _.keys(hash).each(function(ctx){
        return self.ctxDecorations.register(ctx, self.model, hash[ctx]);
      });
    }
  });
  module.exports = CtxDecorations;
}).call(this);
