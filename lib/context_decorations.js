// Generated by LiveScript 1.2.0
(function(){
  var Class, _, lo, requires, Decorations, Repo, CtxDecorations;
  Class = require('jsclass/src/core').Class;
  _ = require('prelude-ls');
  lo = require('lodash');
  require('sugar');
  requires = require('../requires');
  Decorations = requires.lib('decorations');
  Repo = requires.lib('repo');
  CtxDecorations = new Class(Repo, {
    initialize: function(decorations){
      return this.callSuper();
    },
    getRepo: function(ctxName){
      var decorations;
      ctxName || (ctxName = 'default');
      decorations = this.repository.get(ctxName) || new Decorations;
      this.repository.store(ctxName, decorations);
      return decorations;
    },
    find: function(ctxName, model){
      var repo;
      if (model === void 8) {
        model = ctxName;
        ctxName = 'default';
      }
      repo = this.getRepo(ctxName);
      return repo.find(model);
    },
    register: function(){
      var decoration, name, ctx, obj;
      console.log('register: arguments', arguments);
      switch (arguments.length) {
      case 1:
        decoration = arguments[0];
        name = this.nameOf(decoration);
        this.getRepo().register(name, decoration);
        break;
      case 2:
        decoration = arguments[1];
        ctx = arguments[0];
        name = this.nameOf(decoration);
        this.getRepo(ctx).register(name, decoration);
      }
      obj = name != null
        ? decorations
        : decorations[name];
      return this.repository.register(ctx, obj);
    },
    nameOf: function(decoration){
      if (!_.isType('Object', decoration)) {
        throw Error("Decorator must be an Object, was: " + decoration);
      }
      return decoration.name();
    },
    registerList: function(){
      var self, decorations, ctx;
      self = this;
      switch (arguments.length) {
      case 1:
        decorations = arguments.first;
        return decorations.each(function(dec){
          return self.register(dec);
        });
      case 2:
        ctx = arguments.first;
        decorations = arguments.last;
        switch (typeof decorations) {
        case 'array':
          return decorations.each(function(dec){
            return self.register(ctx, dec);
          });
        case 'object':
          return decorations.each(function(name, dec){
            return self.register(ctx, name, dec);
          });
        }
      }
    }
  });
  module.exports = CtxDecorations;
}).call(this);
