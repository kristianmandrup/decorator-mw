// Generated by LiveScript 1.2.0
(function(){
  var Class, Module, Hash, _, rek, requires, Decorations;
  Class = require('jsclass/src/core').Class;
  Module = require('jsclass/src/core').Module;
  Hash = require('jsclass/src/core').Hash;
  _ = require('prelude-ls');
  rek = require('rekuire');
  requires = rek('requires');
  Decorations = requires.file('decorations');
  module.exports = new Class({
    initialize: function(decorations){
      this.repository = new Hash;
      if (decorations === void 8) {
        return;
      }
      if (_.isType('Object', decorations)) {
        return decorations.each(function(name, dec){
          return this.set(name, dec);
        });
      }
    },
    getCtx: function(ctxName){
      var decs;
      ctxName || (ctxName = 'default');
      decs = this.ctxDecorations.get(name) || new Decorations;
      this.ctxDecorations.set(name, decs);
      return decs;
    },
    get: function(ctx, model){
      var ctxDecorations;
      ctxDecorations = arguments.length === 1
        ? this.getCtx()
        : this.getCtx(ctx);
      return ctxDecorations.get(model);
    },
    set: function(){
      var decoration, name, ctx, obj;
      switch (arguments.length) {
      case 1:
        decoration = arguments.first;
        name = this.nameOf(decoration);
        this.getCtx().set(name, decoration);
        break;
      case 2:
        decoration = arguments.last;
        ctx = arguments.first;
        name = this.nameOf(decoration);
        this.getCtx(ctx).set(name, decoration);
      }
      obj = name != null
        ? decorations
        : decorations[name];
      this.repository.set(ctx, obj);
      return {
        nameOf: function(decoration){
          if (!_.typeOf('Object', decoration)) {
            throw Error("Decorator must be an Object, was: " + decoration);
          }
          return decoration.name();
        }
      };
    },
    setList: function(){
      var decorations, ctx;
      switch (arguments.length) {
      case 1:
        decorations = arguments.first;
        return decorations.each(function(dec){
          return this.set(dec);
        });
      case 2:
        ctx = arguments.first;
        decorations = arguments.last;
        switch (typeof decorations) {
        case 'array':
          return decorations.each(function(dec){
            return this.set(ctx, dec);
          });
        case 'object':
          return decorations.each(function(name, dec){
            return this.set(ctx, name, dec);
          });
        }
      }
    }
  });
}).call(this);
