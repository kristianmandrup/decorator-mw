// Generated by LiveScript 1.2.0
(function(){
  var Class, Module, Hash, _, lo, requires, Repo, Debugger, Decorations;
  Class = require('jsclass/src/core').Class;
  Module = require('jsclass/src/core').Module;
  Hash = require('jsclass/src/hash').Hash;
  _ = require('prelude-ls');
  lo = require('lodash');
  require('sugar');
  requires = require('../requires');
  Repo = requires.lib('repo');
  Debugger = requires.file('debugger');
  Decorations = new Class(Repo, {
    initialize: function(hash){
      return this.callSuper();
    },
    isEmpty: function(){
      return this.repository.isEmpty();
    },
    find: function(modelName){
      return this.repository.get(modelName);
    },
    register: function(){
      var self, hash, modelName, klass;
      self = this;
      switch (arguments.length) {
      case 1:
        hash = arguments[0];
        if (typeof hash !== 'object') {
          throw Error("Invalid argument, must be an Object, was: " + hash);
        }
        return _.keys(hash).each(function(key){
          return self.register(key, hash[key]);
        });
      case 2:
        modelName = arguments[0];
        klass = arguments[1];
        if (!_.isType('String', modelName)) {
          throw Error("Repository key must be a String, was: " + typeof modelName + ", " + modelName);
        }
        if (!_.isType('Function', klass)) {
          throw Error("klass to be set for " + modelName + " must be a Function, was: " + typeof klass + " , " + klass);
        }
        return this.repository.store(modelName, klass);
      default:
        throw Error("Invalid arguments, must take Hash or String, Function, was: " + arguments);
      }
    },
    decorate: function(dataObj, model){
      var decorator;
      model || (model = dataObj.model || dataObj.clazz);
      if (!model) {
        throw Error("Unable to determine model to be used for applying decoration");
      }
      decorator = this.repository.get(model);
      if (!decorator) {
        throw Error("No decorator for " + model + " could be found in the repo: " + this.repository);
      }
      return applyDecoration(dataObj, decorator);
    },
    applyDecoration: function(dataObj, decorator){
      if (typeof decorator === 'object') {
        applyDecorationBlueprint(dataObj, decorator);
      }
      if (typeof decorator === 'function') {
        return new decorator(dataObj);
      }
      throw Error("Can't determine a way to apply the decorator: " + decorator + " on the data object");
    },
    applyDecorationBlueprint: function(dataObj, decorator){
      if (decorator['set-data']) {
        decorator.setData(dataObj);
        return decorator;
      }
    }
  });
  module.exports = Decorations;
}).call(this);
