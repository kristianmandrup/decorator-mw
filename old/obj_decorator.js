// Generated by LiveScript 1.2.0
(function(){
  var Class, Module, Forwardable, BaseModel, Person, Decorations, ContextDecorations, DecoratorMw;
  Class = require('jsclass/src/core').Class;
  Module = require('jsclass/src/core').Module;
  Forwardable = require('jsclass/src/forward').Forwardable;
  BaseModel = new Class({
    initialize: function(obj){
      return _.keys(obj).each(function(key){
        return this[key] = obj[key];
      });
    }
  });
  Person = new Class(BaseModel, {
    initialize: function(obj){
      return this.callSuper();
    },
    fullName: function(){
      return [this.firstName, this.lastName].join(' ');
    }
  });
  Decorations = new Class({
    initialize: function(){
      return this.repository = new Hash;
    },
    get: function(name){
      return this.repository.get(name);
    },
    set: function(name, klass){
      return this.repository.set(name, klass);
    }
  });
  ContextDecorations = new Class({
    initialize: function(){
      return this.repository = new Hash;
    },
    getFor: function(name){
      var decs;
      decs = this.ctxDecorations.get(name) || new Decorations;
      this.ctxDecorations.set(name, decs);
      return decs;
    },
    get: function(ctx, model){
      return this.get(ctx).get(model);
    },
    set: function(ctx, decorations, name){
      var obj;
      obj = name != null
        ? decorations
        : decorations[name];
      return this.repository.set(ctx, obj);
    }
  });
  DecoratorMw = (function(superclass){
    var prototype = extend$((import$(DecoratorMw, superclass).displayName = 'DecoratorMw', DecoratorMw), superclass).prototype, constructor = DecoratorMw;
    function DecoratorMw(context){
      this.context = context;
      this.decorations = new ContextDecorations(this.context);
    }
    prototype.run = function(ctx){
      var klass;
      superclass.prototype.run.apply(this, arguments);
      klass = this.decorations.get(this.context, this.model);
      return new klass(this.data);
    };
    return DecoratorMw;
  }(ModelMw));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
