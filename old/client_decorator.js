// Generated by LiveScript 1.2.0
(function(){
  var WatchJS, watchArray, watch, unwatch, callWatchers, ObjDecorator, ClientObjDecorator, slice$ = [].slice;
  require('property');
  WatchJS = require("watchjs");
  watchArray = require('watch-array');
  watch = WatchJS.watch;
  unwatch = WatchJS.unwatch;
  callWatchers = WatchJS.callWatchers;
  ObjDecorator = require('../../obj_decorator');
  module.exports = ClientObjDecorator = (function(superclass){
    var prototype = extend$((import$(ClientObjDecorator, superclass).displayName = 'ClientObjDecorator', ClientObjDecorator), superclass).prototype, constructor = ClientObjDecorator;
    function ClientObjDecorator(model, context){
      this.model = model;
      this.context = context;
      ClientObjDecorator.superclass.apply(this, arguments);
    }
    prototype.blueprint = function(user){
      return this.addSetters();
    };
    prototype.settersObj = function(){
      var res, setters, i$, len$, setter;
      res = {};
      setters = Object.keys(this).filter(function(key){
        return key.match(/^set[A-Z]/);
      });
      for (i$ = 0, len$ = setters.length; i$ < len$; ++i$) {
        setter = setters[i$];
        res[setter] = this[setter];
      }
      return res;
    };
    prototype.addSetters = function(){
      return _.extend(this.model, this.settersObj());
    };
    prototype.setter = function(name){
      var self;
      self = this;
      return {
        on: function(properties){
          var fun;
          fun = slice$.call(arguments, 1);
          self.prototype['set' + name.capitalize()] = fun;
          return self.prop(name).watches(properties);
        }
      };
    };
    prototype.prop = function(name){
      var self;
      self = this;
      return {
        watches: function(properties){
          var i$, len$, property, results$ = [];
          for (i$ = 0, len$ = properties.length; i$ < len$; ++i$) {
            property = properties[i$];
            results$.push(watch(self, name, fn$));
          }
          return results$;
          function fn$(){
            return self['set' + name.capitalize()]();
          }
        }
      };
    };
    return ClientObjDecorator;
  }(ObjDecorator));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
